allauth to replace django-registration
silk or django debug toolbar for profiling

database:
    - keep track of the average time to run tests, to use with message queuing
    - keep track of whether file upload exercise returnables have been checked or not
    - keep track of which tests (with which files etc.) were used for testing
      each returnable
    - db model translations:
        * https://www.djangopackages.com/grids/g/model-translation/
        * django-hvad vs. django-modeltranslation (?)
    - exercise and content revisions:
        * https://www.djangopackages.com/grids/g/versioning/
        * stats: switch between revision specific/overall stats; links to revs
        * django-reversion (?)
    - support more complex relations between exercises
        * interchangeable: a student can choose from a set
        * interdependent: exercise 1 must be completed before exercise 2
            o multi-stage exercises

ui:
    - AJAX notification of session timeout
        * maybe when sending an answer?
    - allow users to highlight text from pages, save the highlights on the
      server
    - link for opening code in a new browser window
    - make calendar reservations atomic
    - make collaborators-field for file exercises optional
    - prevent sending an empty file exercise answer (i.e. without files)
    - line references for included code
        * referenced lines highlighted in the included code box
    - keyboard lookalike render for <kbd> tag, stackoverflow-kinda
    - autofocus forms when the user scrolls the page so that the upmost visible
      form is autofocused
    - <meter> element for completed embedded tasks
        * min=0, max=num of embedded tasks
        * value=num of completed tasks
        * optimum=max
        * high=best achieved num by students for this page
    - a user bar at the top of the window (facebook/stackoverflow-kinda)
        * a green "+1" (or "+<number of points>") for each passed task
        * user history of task tries and other actions
            o including views for submitted files and entered answers
    - admin panel showing the status of needed services:
        * nginx/apache
        * mod_wsgi/uwsgi
        * redis
        * rabbitmq
        * postgresql
        * checking server on/off
        * LXC
        * https
    - admin panel showing the availability of components/plugins:
        * celery, pygments, pillow, etc.
    - real time preview for page editing
    - TEST STAGES for the commands run in tests (compilation phase, run, ...)
    - checkboxes for test commands:
        * show output/errors
            o implies per command expected outputs/errors -> hints
        * show the command run
        * etc.
    - scriptable test result displayer plugins
        * plugin: classic (results & expected results from stdout, stderr)
        * plugin: unit test result view
        * plugin: if program (e.g. python) returns with 1, use stacktrace
          highlighter
        * plugin: compare two images/graphs/tables
        * plugin: automatic plugin select based on mimetype
    - How to Use Lovelace - tutorial
        * introduces to, e.g., file uploads and reading the test results, hints
          notices etc.
            o user agent detection for showing the proper file dialogs
    - Integrated "free" tips for tasks
        * Shown to users even before answering
        * [+] expandable
    - Consider warn before closing the tab warning when there's unsent data
    - Save the unsent user answers periodically/on changes with AJAX as drafts
        * Load the unsent answers when loading the page
    <done> - "View my previous answers" button for tasks
    <done> - BIG AND VISIBLE green check marks/yellow ?s/red Xs for task correctness
    - Students can link their returnables straight as links
        * Links only viewable by teachers and the student
        * Teachers can highlight lines and add comments
    - When a student opens a page, answered (embedded) tasks have
      [+] expandable evaluations
    - Whitelist for allowed file name endings for upload exercises
        * Also applies to file _type_ (e.g. forbid .pyc but allow .py)
    - Autocomplete suggestions for admin textfield editing
        * E.g. when typing <!page=abc, a list of page slugs beginning with abc
          is displayed below the text cursor
        * Perhaps use jQuery-textcomplete
    - untrusted (http://alexnisnevich.github.io/untrusted/) style text
      editor exercises

logic:
    - prevent viewing of tasks if not linked to a course
        * except for admins, by using the sandbox url
